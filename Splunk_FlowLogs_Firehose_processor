# Copyright 2014, Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#  http://aws.amazon.com/asl/
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

"""
For processing VPF FlowLogs data sent directly to firehose.

Flow Logs data sent to Firehose look like this:

{'invocationId': '827b170e-77e5-4627-bfb4-dd48e308a997', 
'deliveryStreamArn': 'arn:aws:firehose:us-east-1:647604195155:deliverystream/VPCFlowLogs-DirectKDF', 'region': 'us-east-1', 'records': 
[
    {'recordId': '49626154501644110739257545332878746850728803363251552258000000', 'approximateArrivalTimestamp': 1643160814345, 
    'data': 'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDEwLjMwLjIuMjM4IDEwLjMwLjEuMjE3IDgwODkgMzkwMTYgNiAyMiAxMDUyNyAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='}, 
    {'recordId': '49626154501644110739257545332878746850728803363251552258000001', 'approximateArrivalTimestamp': 1643160814345, 
    'data': 'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDUyLjk0LjIyOC4xNzggMTAuMzAuMi4yMzggNDQzIDM3Mzc4IDYgMjQgNzIxMSAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='}, 
    {'recordId': '49626154501644110739257545332878746850728803363251552258000002', 'approximateArrivalTimestamp': 1643160814345, 
    'data': 'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDEwLjMwLjIuMjM4IDUyLjk0LjIyOC4xNzggMzczNzggNDQzIDYgMjMgNTEyNSAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='}, 
    {'recordId': '49626154501644110739257545332878746850728803363251552258000003', 'approximateArrivalTimestamp': 1643160814345, 'data':
....
....
    '49626154501644110739257545332917432476956475551291277314000048', 'approximateArrivalTimestamp': 1643160874015, 
    'data': 'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTAyYjlkNDU5NTY3ZjYzYzliIDEwLjMwLjEuMjE3IDEwLjMwLjEuNjEgMzYyNzggODA4OSA2IDM0IDUyODUgMTY0MzE2MDc3OSAxNjQzMTYwODEwIEFDQ0VQVCBPSyJ9'}
    ]
}


The code below will:
1) Read the records from the event data
2) Decode the from base64 format
3) Read the message data which is the actual flow log records
4) Add line separator
5) put the data back to Firehose queue

"""

import base64
import json
import gzip
from io import BytesIO
import boto3

def transformLogEvent(log_event):
    """Transform each log event.

    The default implementation below just extracts the message and appends a newline to it.

    Args:
    log_event (dict): The original log event. Structure is {"id": str, "timestamp": long, "message": str}

    Returns:
    str: The transformed log event.
    """
    return log_event['message'] + '\n'


def processRecords(records):
    for r in records:
        recId = r['recordId']
        data = base64.b64decode(r['data'])
        data = json.loads(data.decode('utf8'))
        joinedData = ''.join(transformLogEvent(data))
        dataBytes = joinedData.encode("utf-8")
        encodedData = base64.b64encode(dataBytes)
        if len(encodedData) <= 6000000:
            yield {
                'data': encodedData,
                'result': 'Ok',
                'recordId': recId
            }
        else:
            yield {
                'result': 'ProcessingFailed',
                'recordId': recId
            }

def lambda_handler(event, context):
    records = list(processRecords(event['records']))
    print("Records Length",len(records))
    return {"records": records}
